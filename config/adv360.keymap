/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include "keydef.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define LHYPER LS(LA(LC(LGUI)))
#define RHYPER RS(RA(RC(RGUI)))
#define LMEH   LS(LA(LCTL))
#define RMEH   RS(RA(RCTL))

#define HM_TAPPING_TERM 300
#define HM_QUICK_TAP    175
#define HM_PRIOR_IDLE   150

#define COMBO_H_TIMEOUT 18
#define COMBO_H_IDLE    150
#define COMBO_V_IDLE    50
#define COMBO_V_TIMEOUT 50

/ {
    combos {
        compatible = "zmk,combos";
        combo_braces {
            timeout-ms = <COMBO_H_TIMEOUT>;
            require-prior-idle-ms = <COMBO_H_IDLE>;
            key-positions = <LT2 LT3>;
            bindings = <&braces>;
            layers = <0 1 2>;
        };

        combo_parens {
            timeout-ms = <COMBO_H_TIMEOUT>;
            require-prior-idle-ms = <COMBO_H_IDLE>;
            key-positions = <LT3 LT4>;
            bindings = <&parens>;
            layers = <0 1 2>;
        };

        combo_brackets {
            timeout-ms = <COMBO_H_TIMEOUT>;
            require-prior-idle-ms = <COMBO_H_IDLE>;
            key-positions = <LT1 LT2>;
            bindings = <&brackets>;
            layers = <0 1 2>;
        };

        combo_equals {
            timeout-ms = <COMBO_H_TIMEOUT>;
            require-prior-idle-ms = <COMBO_H_IDLE>;
            key-positions = <LM1 LM2>;
            bindings = <&kp EQUAL>;
            layers = <0 1 2>;
        };

        combo_minus {
            timeout-ms = <COMBO_H_TIMEOUT>;
            require-prior-idle-ms = <COMBO_H_IDLE>;
            key-positions = <LM2 LM3>;
            bindings = <&kp MINUS>;
            layers = <0 1 2>;
        };

        combo_plus {
            timeout-ms = <COMBO_H_TIMEOUT>;
            require-prior-idle-ms = <COMBO_H_IDLE>;
            key-positions = <LM3 LM4>;
            bindings = <&kp PLUS>;
            layers = <0 1 2>;
        };


        combo_dollarsign {
            timeout-ms = <COMBO_H_TIMEOUT>;
            require-prior-idle-ms = <COMBO_H_IDLE>;
            key-positions = <LB1 LB2>;
            bindings = <&kp DOLLAR>;
            layers = <0 1 2>;
        };

        combo_percent {
            timeout-ms = <COMBO_H_TIMEOUT>;
            require-prior-idle-ms = <COMBO_H_IDLE>;
            key-positions = <LB2 LB3>;
            bindings = <&kp PERCENT>;
            layers = <0 1 2>;
        };

        combo_carat {
            timeout-ms = <COMBO_H_TIMEOUT>;
            require-prior-idle-ms = <COMBO_H_IDLE>;
            key-positions = <LB3 LB4>;
            bindings = <&kp CARET>;
            layers = <0 1 2>;
        };

        combo_exclamation {
            timeout-ms = <COMBO_H_TIMEOUT>;
            require-prior-idle-ms = <COMBO_H_IDLE>;
            key-positions = <RT2 RT3>;
            bindings = <&kp EXCLAMATION>;
            layers = <0>;
        };

        combo_amp {
            timeout-ms = <COMBO_H_TIMEOUT>;
            require-prior-idle-ms = <COMBO_H_IDLE>;
            key-positions = <RT3 RT4>;
            bindings = <&kp AMPERSAND>;
            layers = <0>;
        };

        combo_ast {
            timeout-ms = <COMBO_H_TIMEOUT>;
            require-prior-idle-ms = <COMBO_H_IDLE>;
            key-positions = <RT4 RT5>;
            bindings = <&kp STAR>;
            layers = <0>;
        };

        combo_at {
            timeout-ms = <COMBO_H_TIMEOUT>;
            require-prior-idle-ms = <COMBO_H_IDLE>;
            key-positions = <RM2 RM3>;
            bindings = <&kp AT>;
            layers = <0>;
        };

        combo_arrow {
            timeout-ms = <COMBO_H_TIMEOUT>;
            require-prior-idle-ms = <COMBO_H_IDLE>;
            key-positions = <RB2 RB3>;
            bindings = <&dotarrow>;
            layers = <0>;
        };
    };

    behaviors {
        #include "version.dtsi"

        // Macros
        rarrow: rarrow {
            compatible = "zmk,behavior-macro";
            label = "macro_rarrow";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp GT>;
        };

        braces: braces {
            compatible = "zmk,behavior-macro";
            label = "macro_braces";
            #binding-cells = <0>;
            bindings = <&kp LBRC>, <&kp RBRC>, <&kp LEFT>;
        };

        parens: parens {
            compatible = "zmk,behavior-macro";
            label = "macro_parens";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp RPAR>, <&kp LEFT>;
        };

        brackets: brackets {
            compatible = "zmk,behavior-macro";
            label = "macro_brackets";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp RBKT>, <&kp LEFT>;
        };

        hml: homerow_mods_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <HM_QUICK_TAP>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RKEYS THUMBS>;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <HM_QUICK_TAP>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LKEYS THUMBS>;
            hold-trigger-on-release;
        };

        shftcaps: shftcaps {
            compatible = "zmk,bheavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp LSHFT>, <&caps_word>, <&kp CAPS>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // 0
        default_layer {
            bindings = <
//0        1             2            3            4             5       6                                                       7          8         9              10           11            12              13
&none      &none         &none        &none       &none         &none   &none                                                   &mo 3      &none     &none          &none        &none         &none           &none
//14       15            16           17          18            19      20                                                      21         22        23             24           25            26              27
&kp TAB    &kp Q         &kp W        &kp F       &kp P         &kp B   &none                                                   &none      &kp J     &kp L          &kp U        &kp Y         &kp SEMI        &kp BSLH
//28       29            30           31          32            33      34        35        36            37         38         39         40        41             42           43            44              45
&kp ESC    &hml LCTL A   &hml LALT R  &kp S       &hml LGUI T   &kp G   &none     &mo 1      &kp LHYPER    &kp RCTRL  &kp RGUI   &none      &kp M     &hmr RGUI N    &kp E        &hmr RALT I   &hmr RCTRL O    &kp SQT
//46       47            48           49          50            51                           52            53                               54        55             56           57            58              59
&kp GRAVE  &kp Z         &kp X        &kp C       &kp D         &kp V                        &kp LMEH      &kp RSHFT                        &kp K     &kp H          &kp COMMA    &kp DOT       &kp FSLH        &to 1
//60       61            62           63          64                    65        66         67            68         69         70                   71             72           73            74              75
&none      &none         &kp UNDER    &kp AMPS    &none                 &kp BSPC  &shftcaps  &to 0         &to 2      &kp ENTER  &kp SPACE            &none          &kp DOWN     &kp LBKT      &none           &none
            >;
        };

        // 1
        layer_keypad {
            bindings = <
&trans     &trans      &trans    &trans    &trans     &trans  &trans                                          &trans      &trans    &trans        &trans         &trans          &trans       &trans
&trans     &trans      &trans    &kp PLUS  &kp EQUAL  &trans  &trans                                          &trans      &trans    &kp KP_N7     &kp KP_N8      &kp KP_N9       &trans       &trans
&trans     &kp UNDER   &kp MINUS &brackets &braces    &parens &trans     &trans  &trans      &trans   &trans  &trans      &trans    &kp KP_N4     &kp KP_N5      &kp KP_N6       &trans       &trans
&trans     &trans      &trans    &trans    &trans     &trans                     &trans      &trans                       &trans    &kp KP_N1     &kp KP_N2      &kp KP_N3       &trans       &to 2
&trans     &trans      &trans    &trans    &trans             &trans     &trans  &to 0       &trans   &to 0   &kp KP_N0             &trans        &trans         &kp KP_DOT      &trans       &trans
            >;
        };

        // 2
        layer_vimnav {
            bindings = <
&trans     &trans    &trans     &trans     &trans     &trans      &trans                                         &trans  &trans    &trans     &trans   &trans     &trans     &trans
&trans     &trans    &trans     &trans     &trans     &trans      &trans                                         &trans  &trans    &trans     &trans   &trans     &trans     &trans
&trans     &trans    &trans     &trans     &kp PG_DN  &trans      &trans    &trans  &trans       &trans  &trans  &trans  &kp LEFT  &kp DOWN   &kp UP   &kp RIGHT  &trans     &trans
&trans     &trans    &trans     &trans     &trans     &kp PG_UP                     &trans       &trans                  &trans    &trans     &trans   &trans     &trans     &to 0
&trans     &trans    &trans     &trans     &trans                 &trans    &trans  &to 0        &trans  &to 1   &trans            &trans     &trans   &trans     &trans     &trans
            >;
        };

        // 3
        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &to 0
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };
};
